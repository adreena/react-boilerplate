'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var propTypes = {
  children: _react.PropTypes.node,
  type: _react.PropTypes.string,
  size: _react.PropTypes.string,
  state: _react.PropTypes.string,
  tag: _react.PropTypes.string,
  static: _react.PropTypes.bool,
  addon: _react.PropTypes.bool,
  className: _react.PropTypes.string
};

var defaultProps = {
  tag: 'p',
  type: 'text'
};

var Input = function Input(props) {
  var className = props.className;
  var type = props.type;
  var size = props.size;
  var state = props.state;
  var tag = props.tag;
  var addon = props.addon;
  var staticInput = props.static;

  var attributes = _objectWithoutProperties(props, ['className', 'type', 'size', 'state', 'tag', 'addon', 'static']);

  var checkInput = ['radio', 'checkbox'].indexOf(type) > -1;

  var fileInput = type === 'file';
  var textareaInput = type === 'textarea';
  var selectInput = type === 'select';
  var Tag = selectInput || textareaInput ? type : 'input';

  var formControlClass = 'form-control';

  if (staticInput) {
    formControlClass = formControlClass + '-static';
    Tag = tag;
  } else if (fileInput) {
    formControlClass = formControlClass + '-file';
  } else if (checkInput) {
    if (addon) {
      formControlClass = null;
    } else {
      formControlClass = 'form-check-input';
    }
  }

  var classes = (0, _classnames2.default)(className, state ? 'form-control-' + state : false, size ? 'form-control-' + size : false, formControlClass);

  if (Tag === 'input') {
    attributes.type = type;
  }

  return _react2.default.createElement(Tag, _extends({}, attributes, { className: classes }));
};

Input.propTypes = propTypes;
Input.defaultProps = defaultProps;

exports.default = Input;